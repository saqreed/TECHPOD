from dotenv import load_dotenv
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WHO, LOCATION, ANYDESK, PROBLEM, URGENCY, ADDITIONAL = range(6)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CHAT = os.getenv('ADMIN_CHAT_ID') or '956940111'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_KEYBOARD = [['–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', 'FAQ']]
LOCATION_KEYBOARD = [['üè¢ 2 —ç—Ç–∞–∂', 'üè¢ 3 —ç—Ç–∞–∂', 'üåê –£–¥–∞–ª—ë–Ω–∫–∞']]
URGENCY_KEYBOARD = [['üü¢ –ù–∏–∑–∫–∞—è', 'üü° –°—Ä–µ–¥–Ω—è—è', 'üî¥ –í—ã—Å–æ–∫–∞—è']]
FAQ_KEYBOARD = [
    [InlineKeyboardButton("–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?", callback_data='faq_password')],
    [InlineKeyboardButton("–ì–¥–µ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏?", callback_data='faq_logs')],
    [InlineKeyboardButton("–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –ü–û?", callback_data='faq_update')],
    [InlineKeyboardButton("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data='faq_hours')],
    [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='faq_main')]
]

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ
FAQ_DATABASE = {
    'faq_password': "–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞\n2. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–∏—Å—å–º–µ",
    'faq_logs': "–õ–æ–≥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤:\n- Windows: C:/ProgramData/Logs\n- Linux: /var/log/app\n- MacOS: ~/Library/Logs",
    'faq_update': "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û:\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'\n3. –í—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'",
    'faq_hours': "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n–ü–Ω-–ü—Ç: 9:00-18:00 (–ú–°–ö)\n–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω—ã–µ"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    context.user_data['username'] = user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'
    
    await update.message.reply_text(
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(
            MAIN_KEYBOARD,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return ConversationHandler.END  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq"""
    keyboard = InlineKeyboardMarkup(FAQ_KEYBOARD)
    await update.message.reply_text(
        "üìö *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        parse_mode='Markdown',
        reply_markup=keyboard
    )

async def handle_faq_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ FAQ"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'faq_main':
        await query.edit_message_text(
            "üìö *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(FAQ_KEYBOARD)
        )
        return
    
    answer = FAQ_DATABASE.get(query.data, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='faq_main')]])
    
    await query.edit_message_text(
        answer,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üõ† *–°–ø—Ä–∞–≤–∫–∞*\n\n"
        "1. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥–æ–π /start\n"
        "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
        "3. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel\n\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 9:00-18:00 (–ú–°–ö)",
        parse_mode='Markdown'
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.message.from_user
    context.user_data['username'] = user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'
    
    await update.message.reply_text(
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!* ‚ú®\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –∏–ª–∏ @ivan_petrov_2024_",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return WHO

async def who(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_input = update.message.text.strip()
    if not user_input:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ ID:")
        return WHO
        
    context.user_data['who'] = user_input
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_input}! üéâ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            LOCATION_KEYBOARD,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return LOCATION

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    loc = update.message.text.strip()
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ª–æ–∫–∞—Ü–∏–π
    valid_locations = LOCATION_KEYBOARD[0]  # –ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    
    if loc not in valid_locations:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏:")
        return LOCATION
        
    context.user_data['location'] = loc
    
    if '–£–¥–∞–ª—ë–Ω–∫–∞' in loc:
        await update.message.reply_text(
            "üåê *–£–¥–∞–ª—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø*\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à AnyDesk ID:\n"
            "_–ü—Ä–∏–º–µ—Ä: 123-456-789_",
            parse_mode='Markdown'
        )
        return ANYDESK
    else:
        await update.message.reply_text(
            "üñ•Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n"
            "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:\n"
            "_–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤_",
            parse_mode='Markdown'
        )
        return PROBLEM

async def anydesk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ AnyDesk ID"""
    anydesk_id = update.message.text.strip()
    if not anydesk_id:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à AnyDesk ID:")
        return ANYDESK
        
    context.user_data['anydesk'] = anydesk_id
    await update.message.reply_text(
        "‚úÖ AnyDesk –ø–æ–ª—É—á–µ–Ω\n\n"
        "üñ•Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n"
        "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:",
        parse_mode='Markdown'
    )
    return PROBLEM

async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    problem_text = update.message.text.strip()
    if len(problem_text) > 500:
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return PROBLEM
        
    context.user_data['problem'] = problem_text
    await update.message.reply_text(
        "‚è≥ *–°—Ä–æ—á–Ω–æ—Å—Ç—å*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            URGENCY_KEYBOARD,
            one_time_keyboard=True,
            resize_keyboard=True
        ),
        parse_mode='Markdown'
    )
    return URGENCY

async def urgency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    urgency_text = update.message.text.strip()
    context.user_data['urgency'] = urgency_text
    
    await update.message.reply_text(
        "üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã*\n"
        "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã/–ª–æ–≥–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':",
        parse_mode='Markdown'
    )
    return ADDITIONAL

async def additional(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    additional_info = update.message.text.strip() or "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
    context.user_data['additional'] = additional_info
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    summary = (
        "üö® *–ù–û–í–´–ô –ó–ê–ü–†–û–°* üö®\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {context.user_data['who']} (@{context.user_data['username']})\n"
        f"üìç *–õ–æ–∫–∞—Ü–∏—è:* {context.user_data['location']}\n"
    )
    
    if '–£–¥–∞–ª—ë–Ω–∫–∞' in context.user_data['location']:
        summary += f"üîó *AnyDesk:* `{context.user_data['anydesk']}`\n"
        
    summary += (
        f"üñ•Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* {context.user_data['problem']}\n"
        f"‚è≥ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì¶ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:* {additional_info}\n\n"
        "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        summary,
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    admin_summary = f"{summary}\n\n_–û—Ç–ø—Ä–∞–≤–∏–ª: @{context.user_data['username']} ({context.user_data['who']})_"
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT,
            text=admin_summary,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
        
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler('faq', faq_command))
    application.add_handler(CallbackQueryHandler(handle_faq_buttons))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, who)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            ANYDESK: [MessageHandler(filters.TEXT & ~filters.COMMAND, anydesk)],
            PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, problem)],
            URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, urgency)],
            ADDITIONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚ú®")
    application.run_polling()

if __name__ == '__main__':
    main()